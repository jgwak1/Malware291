
Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00

====================================================================================================
added pid 0 of                        background-process System Idle Process                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                        background-process System                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                        background-process Registry                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                        background-process smss.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                        background-process csrss.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                        background-process wininit.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                        background-process csrss.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                        background-process winlogon.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                        background-process services.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                        background-process lsass.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                        background-process SearchIndexer.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                        background-process sshd.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                        background-process MemCompression                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                        background-process spoolsv.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                        background-process MsMpEng.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                        background-process SgrmBroker.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                        background-process uhssvc.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                        background-process SecurityHealthService.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                        background-process svchost.exe                        with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                        background-process dasHost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                        background-process svchost.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 5872 of                        background-process audiodg.exe                        with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                        background-process svchost.exe                        with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                        background-process svchost.exe                        with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                        background-process svchost.exe                        with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6


spawned_shell_process 7984's parent-process is indeed the main-python-process python3.10.exe : 5112


Finished Blacklisting Main-Python-Process 5112

PS C:\malware> Trace-Command -Name metadata, parameterbinding, cmdlet -Expression {. "C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Remove-Comment.ps1";Remove-Comment -Path "C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1"} -PSHost;
DEBUG: ParameterBinding Information: 0 : BIND NAMED cmd line args [Remove-Comment]
DEBUG: ParameterBinding Information: 0 :     BIND arg 
[C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1] to 
parameter [Path]
DEBUG: ParameterBinding Information: 0 :         Executing DATA GENERATION metadata: 
[System.Management.Automation.ArgumentTypeConverterAttribute]
DEBUG: ParameterBinding Information: 0 :             result returned from DATA GENERATION: 
C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1
DEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.String]
DEBUG: ParameterBinding Information: 0 :             Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :         Executing VALIDATION metadata: 
[System.Management.Automation.ValidateNotNullOrEmptyAttribute]
DEBUG: ParameterBinding Information: 0 :         BIND arg 
[C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1] to param 
[Path] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 : BIND POSITIONAL cmd line args [Remove-Comment]
DEBUG: ParameterBinding Information: 0 : MANDATORY PARAMETER CHECK on cmdlet [Remove-Comment]
DEBUG: ParameterBinding Information: 0 :     BIND arg [] to parameter [ScriptBlock]
DEBUG: ParameterBinding Information: 0 :         Executing DATA GENERATION metadata: 
[System.Management.Automation.ArgumentTypeConverterAttribute]
DEBUG: ParameterBinding Information: 0 :             result returned from DATA GENERATION: 
DEBUG: ParameterBinding Information: 0 :         BIND arg [] to param [ScriptBlock] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 : CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 : CALLING EndProcessing

*SUSPENDED the spawned-powershell-process 7984 due to: 'DEBUG: ParameterBinding Information: 0 : CALLING EndProcessing
'

sleep now : for 300 seconds
wake up now : as 300 seconds past

Finished All Close-Traces-- Elapsed-Time: 0:00:00.046576

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00.312735
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00

Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00.015806

====================================================================================================
added pid 0 of                                                background-process System Idle Process                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                                                background-process System                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                                                background-process Registry                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                                                background-process smss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                                                background-process wininit.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                                                background-process winlogon.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                                                background-process services.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                                                background-process lsass.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                                                background-process SearchIndexer.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                                                background-process sshd.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                                                background-process MemCompression                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                                                background-process spoolsv.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                                                background-process MsMpEng.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                                                background-process SgrmBroker.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                                                background-process uhssvc.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                                                background-process SecurityHealthService.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                                                background-process dasHost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================

Finished Blacklisting Main-Python-Process 5112


*RESUMED the spwaned-powershell-process 7984

DEBUG: ParameterBinding Information: 0 :         BIND arg [2] to parameter [Version]
DEBUG: ParameterBinding Information: 0 :             Executing DATA GENERATION metadata: 
[Microsoft.PowerShell.Commands.SetStrictModeCommand+ArgumentToVersionTransformationAttribute]
DEBUG: ParameterBinding Information: 0 :                 result returned from DATA GENERATION: 2.0
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Version]
DEBUG: ParameterBinding Information: 0 :                 Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :             Executing VALIDATION metadata: 
[Microsoft.PowerShell.Commands.SetStrictModeCommand+ValidateVersionAttribute]
DEBUG: ParameterBinding Information: 0 :             BIND arg [2.0] to param [Version] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Set-StrictMode]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Set-StrictMode]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Import-Module]
DEBUG: ParameterBinding Information: 0 :         BIND arg 
[C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.Management\Microsoft.PowerShell.Management.psd
1] to parameter [Name]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.String[]]
DEBUG: ParameterBinding Information: 0 :                 Trying to convert argument value from System.String to 
System.String[]
DEBUG: ParameterBinding Information: 0 :                 ENCODING arg into collection
DEBUG: ParameterBinding Information: 0 :                 Binding collection parameter Name: argument type [String], 
parameter type [System.String[]], collection type Array, element type [System.String], coerceElementType
DEBUG: ParameterBinding Information: 0 :                 Creating array with element type [System.String] and 1 
elements
DEBUG: ParameterBinding Information: 0 :                 Argument type String is not IList, treating this as scalar
DEBUG: ParameterBinding Information: 0 :                 COERCE arg to [System.String]
DEBUG: ParameterBinding Information: 0 :                     Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :                 Adding scalar element of type String to array position 0
DEBUG: ParameterBinding Information: 0 :             Executing VALIDATION metadata: 
[System.Management.Automation.ValidateTrustedDataAttribute]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.String[]] to param [Name] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [GLOBAL] to parameter [Scope]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.String]
DEBUG: ParameterBinding Information: 0 :                 Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :             Executing VALIDATION metadata: 
[System.Management.Automation.ValidateSetAttribute]
DEBUG: ParameterBinding Information: 0 :             BIND arg [GLOBAL] to param [Scope] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [True] to parameter [PassThru]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.SwitchParameter]
DEBUG: ParameterBinding Information: 0 :                 Trying to convert argument value from System.Boolean to 
System.Management.Automation.SwitchParameter
DEBUG: ParameterBinding Information: 0 :             BIND arg [True] to param [PassThru] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [Ignore] to parameter [ErrorAction]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.ActionPreference]
DEBUG: ParameterBinding Information: 0 :                 Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :             BIND arg [Ignore] to param [ErrorAction] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [Ignore] to parameter [WarningAction]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.ActionPreference]
DEBUG: ParameterBinding Information: 0 :                 Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :             BIND arg [Ignore] to param [WarningAction] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [Ignore] to parameter [InformationAction]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.ActionPreference]
DEBUG: ParameterBinding Information: 0 :                 Parameter and arg types the same, no coercion is needed.
DEBUG: ParameterBinding Information: 0 :             BIND arg [Ignore] to param [InformationAction] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [False] to parameter [Verbose]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.SwitchParameter]
DEBUG: ParameterBinding Information: 0 :                 Trying to convert argument value from System.Boolean to 
System.Management.Automation.SwitchParameter
DEBUG: ParameterBinding Information: 0 :             BIND arg [False] to param [Verbose] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [False] to parameter [Debug]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.SwitchParameter]
DEBUG: ParameterBinding Information: 0 :                 Trying to convert argument value from System.Boolean to 
System.Management.Automation.SwitchParameter
DEBUG: ParameterBinding Information: 0 :             BIND arg [False] to param [Debug] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Import-Module]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Import-Module]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Get-ChildItem]
DEBUG: ParameterBinding Information: 0 :         BIND arg [Stop] to parameter [ErrorAction]
DEBUG: ParameterBinding Information: 0 :             COERCE arg to [System.Management.Automation.ActionPreference]
DEBUG: ParameterBinding Information: 0 :                 Trying to convert argument value from System.String to 
System.Management.Automation.ActionPreference
DEBUG: ParameterBinding Information: 0 :                 CONVERT arg type to param type using 
LanguagePrimitives.ConvertTo
DEBUG: ParameterBinding Information: 0 :                 CONVERT SUCCESSFUL using LanguagePrimitives.ConvertTo: [Stop]
DEBUG: ParameterBinding Information: 0 :             BIND arg [Stop] to param [ErrorAction] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Get-ChildItem]
DEBUG: ParameterBinding Information: 0 :         BIND arg 
[C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1] to 
parameter [Path]
DEBUG: ParameterBinding Information: 0 :             Binding collection parameter Path: argument type [String], 
parameter type [System.String[]], collection type Array, element type [System.String], no coerceElementType
DEBUG: ParameterBinding Information: 0 :             Creating array with element type [System.String] and 1 elements
DEBUG: ParameterBinding Information: 0 :             Argument type String is not IList, treating this as scalar
DEBUG: ParameterBinding Information: 0 :             Adding scalar element of type String to array position 0
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.String[]] to param [Path] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND cmd line args to DYNAMIC parameters.
DEBUG: ParameterBinding Information: 0 :         DYNAMIC parameter object: 
[Microsoft.PowerShell.Commands.GetChildDynamicParameters]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Get-ChildItem]
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.IO.FileInfo]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg 
[C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1] to 
parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg 
[C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Resolve-Path]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Resolve-Path]
DEBUG: ParameterBinding Information: 0 :         BIND arg 
[C:\Users\puma-4\Downloads\PowerSploit-master\PowerSploit-master\ScriptModification\Out-EncryptedScript.ps1] to 
parameter [Path]
DEBUG: ParameterBinding Information: 0 :             Binding collection parameter Path: argument type [String], 
parameter type [System.String[]], collection type Array, element type [System.String], no coerceElementType
DEBUG: ParameterBinding Information: 0 :             Creating array with element type [System.String] and 1 elements
DEBUG: ParameterBinding Information: 0 :             Argument type String is not IList, treating this as scalar
DEBUG: ParameterBinding Information: 0 :             Adding scalar element of type String to array position 0
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.String[]] to param [Path] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     BIND cmd line args to DYNAMIC parameters.
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Resolve-Path]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing

*SUSPENDED the spawned-powershell-process 7984 due to: 'DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
'

sleep now : for 300 seconds
wake up now : as 300 seconds past

Finished All Close-Traces-- Elapsed-Time: 0:00:00.015143

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00.047106
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00

Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00

====================================================================================================
added pid 0 of                                                background-process System Idle Process                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                                                background-process System                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                                                background-process Registry                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                                                background-process smss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                                                background-process wininit.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                                                background-process winlogon.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                                                background-process services.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                                                background-process lsass.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                                                background-process SearchIndexer.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                                                background-process sshd.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                                                background-process MemCompression                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                                                background-process spoolsv.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                                                background-process MsMpEng.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                                                background-process SgrmBroker.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                                                background-process uhssvc.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                                                background-process SecurityHealthService.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                                                background-process dasHost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================

Finished Blacklisting Main-Python-Process 5112


*RESUMED the spwaned-powershell-process 7984

DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Where-Object]
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [FilterScript]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [FilterScript] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :         BIND arg [ $_.Type -ne 'Comment' ] to parameter [Property]
DEBUG: ParameterBinding Information: 0 :             BIND arg [ $_.Type -ne 'Comment' ] to param [Property] SKIPPED
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Where-Object]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Management.Automation.PSToken]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [System.Management.Automation.PSToken] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [System.Management.Automation.PSToken] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Where-Object]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing

*SUSPENDED the spawned-powershell-process 7984 due to: 'DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
'

sleep now : for 300 seconds
wake up now : as 300 seconds past

Finished All Close-Traces-- Elapsed-Time: 0:00:00.015816

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00.078123
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00

Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00

====================================================================================================
added pid 0 of                                                background-process System Idle Process                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                                                background-process System                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                                                background-process Registry                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                                                background-process smss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                                                background-process wininit.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                                                background-process winlogon.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                                                background-process services.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                                                background-process lsass.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                                                background-process SearchIndexer.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                                                background-process sshd.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                                                background-process MemCompression                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                                                background-process spoolsv.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                                                background-process MsMpEng.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                                                background-process SgrmBroker.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                                                background-process uhssvc.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                                                background-process SecurityHealthService.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                                                background-process dasHost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================

Finished Blacklisting Main-Python-Process 5112


*RESUMED the spwaned-powershell-process 7984

DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [New-Object]
DEBUG: ParameterBinding Information: 0 :         BIND arg [Text.StringBuilder] to parameter [TypeName]
DEBUG: ParameterBinding Information: 0 :             Executing VALIDATION metadata: 
[System.Management.Automation.ValidateTrustedDataAttribute]
DEBUG: ParameterBinding Information: 0 :             BIND arg [Text.StringBuilder] to param [TypeName] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [New-Object]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing

*SUSPENDED the spawned-powershell-process 7984 due to: 'DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
'

sleep now : for 300 seconds
wake up now : as 300 seconds past

Finished All Close-Traces-- Elapsed-Time: 0:00:00.015097

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00.062340
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00

Finished starting job1,job2,job3,job4 -- Elapsed-Time: 0:00:00

====================================================================================================
added pid 0 of                                                background-process System Idle Process                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4 of                                                background-process System                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 92 of                                                background-process Registry                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 320 of                                                background-process smss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 436 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 512 of                                                background-process wininit.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 520 of                                                background-process csrss.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 576 of                                                background-process winlogon.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 648 of                                                background-process services.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 664 of                                                background-process lsass.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 764 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1020 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1036 of                                                background-process SearchIndexer.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1048 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1140 of                                                background-process sshd.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1200 of                                                background-process MemCompression                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1692 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1720 of                                                background-process spoolsv.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 1844 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2028 of                                                background-process MsMpEng.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2108 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2500 of                                                background-process SgrmBroker.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 2860 of                                                background-process uhssvc.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4108 of                                                background-process SecurityHealthService.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 4200 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 6340 of                                                background-process svchost.exe                                                with username NT AUTHORITY\SYSTEM to pid-blacklist.
added pid 424 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1028 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1160 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1380 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1452 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1616 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1624 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 1836 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2052 of                                                background-process dasHost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2088 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2264 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 2780 of                                                background-process svchost.exe                                                with username NT AUTHORITY\LOCAL SERVICE to pid-blacklist.
added pid 884 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 1384 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
added pid 2572 of                                                background-process svchost.exe                                                with username NT AUTHORITY\NETWORK SERVICE to pid-blacklist.
====================================================================================================

Finished Blacklisting Main-Python-Process 5112


*RESUMED the spwaned-powershell-process 7984

DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess'] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess'] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess',] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess',] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', ''] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', ''] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = (] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = (] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 |] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 |] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)})] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)})] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) ] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join '')] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join '')] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a'] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a'] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a',] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a',] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword,] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword,] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, ] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, ] to param [InputObject]
 SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder] to 
parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder] to param 
[InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder.] to 
parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder.] to param
 [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder.GetBytes] 
to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder.GetBytes] 
to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder.GetBytes(]
 to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, $AsciiEncoder.GetBytes(]
 to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt),] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt),] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1"] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1"] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1",] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1",] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor,] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor,] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, ] to parameter 
[InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, ] to param [InputObject] 
SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0,] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0,] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String(] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String(] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output =] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output =] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose ] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose ] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"

] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"

}] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"

}] to param [InputObject] SUCCESSFUL
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING EndProcessing
DEBUG: ParameterBinding Information: 0 :     BIND NAMED cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     BIND POSITIONAL cmd line args [Out-Null]
DEBUG: ParameterBinding Information: 0 :     MANDATORY PARAMETER CHECK on cmdlet [Out-Null]
DEBUG: ParameterBinding Information: 0 :     CALLING BeginProcessing
DEBUG: ParameterBinding Information: 0 :     BIND PIPELINE object to parameters: [Out-Null]
DEBUG: ParameterBinding Information: 0 :         PIPELINE object TYPE = [System.Text.StringBuilder]
DEBUG: ParameterBinding Information: 0 :         RESTORING pipeline parameter's original values
DEBUG: ParameterBinding Information: 0 :         Parameter [InputObject] PIPELINE INPUT ValueFromPipeline NO COERCION
DEBUG: ParameterBinding Information: 0 :         BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{

`$a = "$Cipher";

`$encoding = New-Object System.Text.ASCIIEncoding;

`$dd = `$encoding.GetBytes("$InitializationVector");

`$aa = [Convert]::FromBase64String(`$a);

`$derivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes(`$b, `$encoding.GetBytes(`$c), "SHA1", 2);

[Byte[]] `$e = `$derivedPass.GetBytes(16);

`$f = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider;

`$f.Mode = [System.Security.Cryptography.CipherMode]::CBC;

[Byte[]] `$h = New-Object Byte[](`$aa.Length);

`$g = `$f.CreateDecryptor(`$e, `$dd);

`$i = New-Object System.IO.MemoryStream(`$aa, `$True);

`$j = New-Object System.Security.Cryptography.CryptoStream(`$i, `$g, 
[System.Security.Cryptography.CryptoStreamMode]::Read);

`$r = `$j.Read(`$h, 0, `$h.Length);

`$i.Close();

`$j.Close();

`$f.Clear();

if ((`$h.Length -gt 3) -and (`$h[0] -eq 0xEF) -and (`$h[1] -eq 0xBB) -and (`$h[2] -eq 0xBF)) { `$h = 
`$h[3..(`$h.Length-1)]; }

return `$encoding.GetString(`$h).TrimEnd([Char] 0);

}

"@

Out-File -InputObject $Output -Encoding ASCII $FilePath

Write-Verbose "Encrypted PS1 file saved to: $(Resolve-Path $FilePath)"

}

] to parameter [InputObject]
DEBUG: ParameterBinding Information: 0 :             BIND arg [function Out-EncryptedScript

{

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]

[CmdletBinding()]

Param (

[Parameter(Position = 0, Mandatory = $True)]

[String]

$ScriptPath,

[Parameter(Position = 1, Mandatory = $True)]

[Security.SecureString]

$Password,

[Parameter(Position = 2, Mandatory = $True)]

[String]

$Salt,

[Parameter(Position = 3)]

[ValidateLength(16, 16)]

[String]

$InitializationVector = ((1..16 | ForEach-Object {[Char](Get-Random -Min 0x41 -Max 0x5B)}) -join ''),

[Parameter(Position = 4)]

[String]

$FilePath = '.\evil.ps1'

)

$TempCred = New-Object System.Management.Automation.PSCredential('a', $Password)

$PlaintextPassword = $TempCred.GetNetworkCredential().Password

$AsciiEncoder = New-Object System.Text.ASCIIEncoding

$ivBytes = $AsciiEncoder.GetBytes($InitializationVector)

[Byte[]] $scriptBytes = Get-Content -Encoding Byte -ReadCount 0 -Path $ScriptPath

$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes($PlaintextPassword, 
$AsciiEncoder.GetBytes($Salt), "SHA1", 2)

$Key = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

$Key.Mode = [System.Security.Cryptography.CipherMode]::CBC

[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16)

$Encryptor = $Key.CreateEncryptor($KeyBytes, $ivBytes)

$MemStream = New-Object System.IO.MemoryStream

$CryptoStream = New-Object System.Security.Cryptography.CryptoStream($MemStream, $Encryptor, 
[System.Security.Cryptography.CryptoStreamMode]::Write)

$CryptoStream.Write($scriptBytes, 0, $scriptBytes.Length)

$CryptoStream.FlushFinalBlock()

$CipherTextBytes = $MemStream.ToArray()

$MemStream.Close()

$CryptoStream.Close()

$Key.Clear()

$Cipher = [Convert]::ToBase64String($CipherTextBytes)

$Output = @"

function de([String] `$b, [String] `$c)

{
spawned_psh_process -- Ended before 1 hr ; with NO exception raised
Closing Last ETW-Session-Set

Finished All Close-Traces-- Elapsed-Time: 0:00:00.015274

Started joinit for FILE
Finished joinit for FILE -- Elapsed-Time: 0:00:00
Started joinit for REGISTRY
Finished joinit for REGISTRY -- Elapsed-Time: 0:00:00
Started joinit for NETWORK
Finished joinit for NETWORK -- Elapsed-Time: 0:00:00
Started joinit for PROCESS
Finished joinit for PROCESS -- Elapsed-Time: 0:00:00
